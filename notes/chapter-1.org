* Operating System Interfaces
** The conlfict in designing a Kernel.
On one hand, one wants a simple & easy to understand interface & at the same time wants them to be very sophisticated & feature rich. This conflict in design has been solved by designing interfaces in a manner such that they rely on few mechanisms & can be easly composed.

** What is a Kernel ?
A kernel is a special program which provides access to the resources of the machine like storage, memory, networking etc.. Whenever a process needs to use any of these resources it's done via the kernel through something known as a *system call*. The kernel uses a hardware protection mechanisms provided by the CPU to ensure that each process executing in user space can only access it's own memory. When a user process invokes a system call, the hardware raises the privallage level & starts executing a pre-arranged function in the kernel.

** The Shell
It's a simple program which reads commands from the user & executes them. The fact that it's in user space shows the power of the kernel interfaces & how flexible they are.

** fork, wait & exec
When a process calls *fork*, a new(child) process is spawned with a copy of the memory of the calling(parent) process. The execution of this child process also begins from the point where the *fork* system call was made? *fork* returns the PID of the child process to the parent & '0' to the child process. It can also return *-1* if there's an error.

Most system calls, if not stated otherwise, returns 0 for no error & -1 if there is.

The *wait* system call, waits until a child exits & returns it's PID. It returns -1 if there are no children. Optionally a pointer can also be passed to *wait* to recieve the exit status of the child.
#+begin_src C
  int exit_code = 0;
  int pid;
  pid = wait(&exit_code);
#+end_src
OR, if we don't care about the exit code
#+begin_src C
  int pid;
  pid = wait((int*) 0);
#+end_src

The *exec* system call replaces the memory of the calling process with a new memory image loaded from a file in a particular format. The format indicates which part is data, which part holds the instructions & which instruction to start from. Xv6 uses the ELF(executable & linkable format) format. When *exec* succeeds, it doesn't return to the calling program, instead execution starts as per the point declared in the ELF header. *exec* accepts 2 arguments, the name of the file & an array of arguments.
#+begin_src C
  char *argv[3];
  argv[0] = "echo";
  argv[1] = "hello";
  argv[2] = 0;
  exec("/bin/echo", argv);
  printf("exec error\n");
#+end_src
As one can see the first argument to the program is the name of the program itself, & so, most programs generally ignore the first argument.

The *shell* then, broadly speaking, is mostly a composition of these system calls. It reads the command from the user, forks & then executes the required program via *exec*. There is good reason why *exec* & *fork* aren't combined into a single call. The shell exploits this separation to handle I/O redirection in a clean way. One may think that is sub-optimal as we create a copy of the process & then immediately repalce the memory via *exec*, but most operaing kernels optimize the implementation of *fork* for this use case by using virtual memory techniques such as copy-on-write.

** File Descriptors 
A file descriptor is a (small)integer which represents a kernel managed object that a process may read & write to. Processes may obtain a file descriptor by opening a file, directory, device, by creating a pipe or by duplicating an existing descriptor. File descriptors abstract away the differences b/w files, pipes & devices, making them all look like a stream of byters. 

